// Generated by CoffeeScript 1.3.3
(function() {
  var $, AjaxInputs, defaults, namespace;

  $ = jQuery;

  defaults = {
    selector: 'input',
    events: 'change',
    method: 'POST',
    data: {},
    dataType: 'json'
  };

  namespace = 'ajaxInputs';

  $.fn[namespace] = {
    defaults: defaults
  };

  $.fn[namespace] = function(option) {
    var args;
    args = arguments;
    return this.each(function() {
      var $this, data, options;
      $this = $(this);
      if (typeof option === 'object') {
        options = option;
      }
      data = $this.data(namespace);
      if (!data) {
        $this.data(namespace, data = new AjaxInputs(this, options));
      }
      if (typeof option === 'string') {
        args = Array.prototype.slice.call(arguments, 0);
        args.shift();
        return data[option].apply(data, args);
      }
    });
  };

  AjaxInputs = (function() {

    function AjaxInputs(el, options) {
      this.options = options;
      this.$el = $(el);
      this.options = $.extend({}, defaults, this.options);
      this.$el.on(this.options.events, this.options.selector, $.proxy(this.onChange, this));
    }

    AjaxInputs.prototype.onChange = function(e) {
      var $input, data,
        _this = this;
      $input = $(e.target);
      data = $.extend({}, this.options.data);
      data[$input.attr('name')] = $input.val();
      return (function($input) {
        return $.ajax({
          url: _this.options.url,
          data: data,
          type: _this.options.method,
          dataType: _this.options.dataType,
          success: function(response) {
            if ($.fn.formUnload) {
              _this.$el.closest('form').formUnload('stored', $input);
            }
            return _this.$el.trigger("" + namespace + ":done", response, e);
          }
        }).fail(function(jqXHR) {
          return _this.$el.trigger("" + namespace + ":fail", jqXHR, e);
        }).always(function(response) {
          return _this.$el.trigger("" + namespace + ":always", response, e);
        });
      })($input);
    };

    return AjaxInputs;

  })();

}).call(this);
